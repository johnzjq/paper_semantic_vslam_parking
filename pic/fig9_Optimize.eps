%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 590.000000 457.000000
%APL_DSC_Encoding: UTF8
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 590 457
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 590 457
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: PingFangSC-Regular
%!FontType1-1.0: AAAAAC+PingFangHK-Regular 001.003%%CreationDate: 8/12/17% Copyright 2017 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (001.003) readonly def/FullName (PingFangHK-Regular) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -150 def/UnderlineThickness 58 defend readonly def/FontName /AAAAAC+PingFangHK-Regular def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 1 /cid3 putdup 2 /cid11 putdup 3 /cid12 putdup 4 /cid47 putdup 5 /cid50 putdup 6 /cid51 putdup 7 /cid57 putdup 8 /cid68 putdup 9 /cid69 putdup 10 /cid70 putdup 11 /cid71 putdup 12 /cid72 putdup 13 /cid75 putdup 14 /cid76 putdup 15 /cid78 putdup 16 /cid79 putdup 17 /cid80 putdup 18 /cid81 putdup 19 /cid82 putdup 20 /cid85 putdup 21 /cid86 putdup 22 /cid87 putdup 23 /cid89 putreadonly def/FontBBox {-92 -232 1146 972} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BEBCD733EC3686D1BE04DD7A740E7D3C5D7A9AD72FC38F378F8E8E79BED62BAE00987484647D62338FBFD2764E4766ECDA57C8A75BA66BAF8917047038EB31B20ED0726C6B33BA9099D4F5E55335A1AB0C646BE9A014E0057560DFD3DA5C885F668F2A073CAB5CDD0904AD920C4DB457D28B33D9AC6F50AEE8BD477351CC5249ECEEC7625F8DC4B9103B3BA79C8CD2037D611ABACF689BD4844CC57B19930F8F2FC0F5C741AC8830898F69CF37542789199ACEF7FD619DCB28826B984BD440DF39D105F7AE53ABB4D95488CDC428C02D83D4E8717AEBD655174BB9A1E99991BAA588472B8CCB11F1011571915190C5FC350EA441CA4EA382AB94AE8D143AC161789EC8A7A451A776318E374578EE5C02AC4090CC983A0D9A6B080439313C1FBAADDB1126051839CCA3BBBF6336BDD934D9EDB88C1AEEA8701F7B98138D39C183C7EC3AFCAC5ED8272177610EF74244FE4DF5DF892130C39AAA13725D9B561844CB696F99E75D101DCA33B2EC1C44531E9E39B069FE27B0A3BD061F824380051DE3A84C44837F0A999A51B40C5A3F37816C0B6B44D2242463319FC6F36E42EE7DE120709EF148D05407090FCF3852F9B63A5F4FCE515C8D9AED9B92F888A24B6022735044FBECDA65F38623D0006D3DCC6A9A7288531311A44035D457837B97044FB3BEDA45C982EA744831927E8523B4DE83BF86EA5B5CD2BA10A0B8E65B4D247E7AA51DB8CCF4582A34CE6B01DC3F9034407B811156E83ABD0F8D12A9C80E6A63898EAEC97A179C398B15A38571AE2064C0679B077A3974B7059DF251FAA38145D44083E1370F5B46C06EC5FE5B99F914F37644D6CEA0059C1B4012C63FED95C14142D1A6980094713606FEC77BF74DDD5AFBAD782451F5595CD7F4829FA06286C963A5C724A9B6B3D15A93122F880073D4307212CD2F43A4134394360CDBBBAE70864FCAA56EA9F63F7D7D506968BF250FA69D55C008B7BB4B43B91D12AEB880015F11BFEA2747523AFCC27368473F900FABBB8D83D8AD2E1D1CB56568B59926CF4CD383C5895015011128E32B7A521EEE540C0586EECA384DF8164B6FD6BACCC480CAFD3DAE51C78510A007BE1CA33A47107CE603B14B10E4BF9F5FE9166C4AA0893C38BA3D58DDAAE42205370A1460CE0E381E163E8AE26EA96920706601C524B93BC7DEA7C2B3D294E8994E632B952AFD65F0A159C9EB03EE90A5C81DE8CF47C61140EEBCEF4BDABC766216C6D213EBEA18D5C45F8BB9695CC2CFD95023203484491D73D70207527005F713BF97A3406FB61FC45FB01B8CA1ADCB39447DCA84FD698E977FC2F808BD19DB164097509559A0ECC1120CC33E4E73D571100EC9AF08DA5B164787F11EDEEA0E5532449A729C6E13D31DEA91C62427C419D5F76C5C5A87D502218EECBA255C187AB89560235FC8CA665DD628D02E41334A742289E06C04E02781163278B56B67312A73CDE706B32F07C682A5E2B53393649763CB99BF9F8A4E1001B693ED92936DBE6EA4232492B7E66FBAD383A50DA3514DE725EC56F299813D9E6AE7ABD7AEE44F14028C9DFCF197FF6A6916F8CCC6D3B4AF8295DDF35F43A14742F8B76569F4035AE43A69B300AE684482A8D1AB58F5D84EB2190379CE37F04A68A275B5AE7E2AB7107259DBAEA2F04CC1167711F7176DDEEC487DE9F2DF64D775EFA11CC6DA90C15B6E990D07CCE28451BC78005CA2A77F4286DAC7F6B3A4127A98C544B15A83463A25EAD6CE8EE60989E4450499B95176E88A48F65C23514D6A56F98B22AAEA0C0A8FC0BAE1723B6F07AAFA6BA6F1699C76747873CDB788A57296296FFE48A0B7B3475013369EC9FA905D9F06CD17CBC36BD9A8793E38A6BD1CDE30D7AFDDAEFDAE699CEC02B6B090AF124D526F11D61929927A020DD6330C346366CFC34B241837C683003E93C1B9F41DEF0E9ABA0D168913B6F06784DE22E3ED5FEC74D1B5D8ADF27CA4F26A31BE2EA51D4B07C8FEF6301254C202218F7EBA250138366A8020815C2A48AEF773C1848E4FC250921FB1E90D032311859BB991C5115B7813A1DEC8814DEB1249667B27984D238D14F593A58E9297AFAF277306A8A48DF4B495E8CA74556571ED8FC0DA6D28131BE0918EB698CB66977E5192C6BD63017163C44C54F5302444EAC96A9E5A13B493EECC6A7FC631294DB4099393EBD615E022A044FB50B7FBB3E6500EA2983AE214974889482067895FCEFD1FD4631DE26F47D136352769FDF3A37B23ECE40D6B8DE5F8AD9F24F8D79D0C3BEABF329198816AECD175FA7019D2D533CF983112FFFC67C7FB3CDCBA0E220CA8287214B4EDE6BD0B3C54D71118D61C549BC91C2E15A17B551229A89458DA9D3EC5C9EDE908C6A797639B1E093C6D380F3DAB6D5DAA6A9EB92154BC6715A7B60709E21044A9C78E744950DCBDF9E79529D8887E2B3E0C82A453B52B1E10A218AFC368148B7DBDA6977822664F9F9E3745076F2F9B85E2A78D480D1D99EA9E0C515612A56D31BB264B66E48986E25DCB96FED0D1A5A17F92830783BA1F5A6A025EA9E7CB2EB7D32F47EBB4D71B5E5BCAE6665E76E7911ADD77D13D0FF2408056E452EC44DC2AAA7EEEE7AE26AA8D895E0769D87277B9877395619B09246533B0284F243A091B186ED19358F22237D54FA8BD43AD6EF45DAB87D351095722E3871CBE6E7BC17CF58A1B52B176AF887F2B18DB72BDEA02655B3E21E9ED5F44683CD9215E9FB01B8D86BB17EA820B2B7A13E5B998AB65BE2E0BE72D0677A75466A50E0FF1C9A66144E619378B15FC2FF0D3F2ADCBB7D95FBEF07FD92B566089DEBB6E1A2284AC5BF06D40B53CE1C668B8439A0DAB789FAD562BE50C1D6FAC162490A0FE0F2CA1FE04542FD0326ABFA19AC6AD8067AC1E2C59FEC6D3EEB88017C0F69BC452B7043969C0583E5F1983C055C8B904B95AB82258278EC8675A9326F7FC70F153C3DDDC5A4C3EEC31D647BAADF217CD3EA5793677E2A6E43ACA4CB7CC47D6B29E0E1A424DDDD103AADAE94815CD3171151423DEE6FB5F93F8B3E634037491E9264BCA2646E56A15A0276A894795A5661D1C690523E6CA4D52406284D93F403196593031B262EBB65676F66F3C42DDE1EDBA7C417E76B1B6CD10827597C2AA050FB85796F0FCA62985A5D1C8A5A24DBD591CAE9210E62F8C3DA4CF00A5D2DA2B356CDA684132C7B7FBAA03A687A5123F14ECB238632BF5729CEA66F950300FC4E09180D5FC0BD46C9C923F887ABAB38D6B6390EAAB7C09C8EE62C3A870FB8C07080FA7B15001D83CBAE29ACDAF36F053ED46320FFF9332B3F2754E0133A643384363E85E9D49EBF52F239CB53C5598C5496497951F2F48F2369B17015D655B2695EB6DF789A9B7B93FFBA24A3D7A3D1D4D6B5CCE5B534838FE26FB83025E2AF7A057E79407DB693AD51C1D30660E2A97C13283634F4E39B3EFEEDE4E9159E1E9DB35D1017EB2459BBCB14D134024699B52EFDE46267DB4A765F61A594B21E818F266CFBBDB2779AD9314F43C17106C61A8D7DF5B0B9AE123FF86E4C96B91B6312612C5CAA70BD22B6BE6A9AACCBD54A69E3FBD7A59D4D7E1062BBBAE9C896D0562C1EE5D43F5C2D4DDE0A600D869F78D8B43E33F4145F7F97D38C0BE6D0F59486D364F796AA01C9AA89DD9B17F8F90FD9213FBEF633F46229B1AAC21F26C8630746201F48E66A7909800C7FAE6EC62712220601222E3C32F53D66970FE823C64FA7A55B61379F66A5027AAA1CB3FE5039140DBA6ADE9B93621D1EEFBBA040993D8379E24CCAE641CD28EA42F287A90299A510C3C0C5A98369A10404C46973320A7A59726B68F0EAD400BFA5C90057990025C597F780FD81308663D59E07EE875ED14A3D4F20DE5C6CF23AB1E0FF7C909BCCE9F3F06E4264DE433FC838857CEC2633967CBBBDE72281FDA1DC7374337D72430C6EA31121DE0E91D815E0B0C3529324E9C3D055FBE0CE5F21211EFAF722ED1A6161EE0EA9A45ED514BCA8138A18C15DE9501F4944E12A446418BDF2A77AED0B645020B7C6748F96016A9C632FA6415AEF3306E7440CBB503859ED5C02AA24F79F73750585C7CE4535F3C64089924DAAA953E032287D660570A82E41CA84B6EC2942CA89AA56A3622FC7F95EECAAEA312E555750DAF0EFA695AD30975B853200A849FAD94B60C99C21AD683C388F9B8C3C3637AAA45F87636794C531D11E34E2B0C5D6379189AAF12BB7FADAAF6D03C26E72A2E0F1BBD3EEA56D8CB6580F7E8A6A2A3C03A9223581DF7FF84EC1CE0F1F4F6F448FBAAD5C001E76EF325F2BA9473DE7794D4F5CAE6BFDCC6896A2382F658807B722DCEE7360BE78E73048E71F7EF5EDB341E1FCDBBF88FFEEC5DA9AE84B44F379AB337F4CCACCBBABDA6A0ED152B9BBA1594289017C4A739632B8D1FC71EFFB65DBFB82AC95FBF9FDAAE35AD0896F7155BA29EF6E3DF97065661F0FCE4C8CDA20FF035B675E1788B2F50C5E280CC65EB4D9F4EAE5CEDD6E17CFC721702EBD150C9983447898953F663DD3D2F20D76BE4C800089B6432E23A46EE66B7B1A4D8548E03459071483D3186790453DC63EB637CE58BD46B9D2183DBAE6743A99BBF36A693B4193F7135D59CDF859D3FC7D4B531033BE48361BD4FAB2D3A8F8BA34E4AB5BE86719B0DC1DB2FF2F3FC1D32DE025F4E0DFD860D7DEBC5FA6FA932A3FB39A7FD85A0C3F1E962D2E8BBBA6334AF01F07F98A6C5CC4F2DE5258021DE25BB14410828F9122E0140229AD15DB5878FE1ADD7E5DF0725ADE644EA84F12488DDA725EF52A4C565FEBCD3632B2F72D567310980406DDB0EC59A654121DA8C7D19193DE9054E2F0D7F94DF08CED81A7B2C2C7A3462FB63BE887FB42B6BC2F5ABBD5D65E749824807AFCF41B0DC3D0A552C661C079DEC7C41A2153263045F758EAA8235E7AB0CB7222736359022DB2CD31A942181D5EDCC61081C7F023DDC9C61D3E969028771448B6D008E396B27DF042879F782D3D483FB0919A561A8A0E99C6585F890FBDF51434EF6805B6D6805C590791788424A5B12508141FCD1070D170E38E4048068C8E3ACB51B64BFD61A041385D353607D34CBCE5DC353869D97C68D5EB4532B3E8F4F9C3C87E6C20F5D3AC8DC1EF00694E47833ED789503A8D3FEEBAE5B87E4BD3C343C112FE228CB538CBC77A85CD66B10C5F35FB7C5076F900F7CAB2A191926FF2BDA710FF04DEE8EA34558D0FC7A8703FD7ED16819C33D43DF1F817A5BF5E76FFF20B374350374CF799E391EE3C6177F3753B5646EDEB380C88FC1DBA6CFF3126524AE3470356FC616F17705DBD68F92E2B4649EBC0A70A6216D623826E9D8C362607ED7D90FF10F9BACFFDFEB96A7844F50FBB5F4B5FCD6FE3035D53E3710DC2E991A830259B4135EDB8901C2A82595A58CF4FD2D181CCCCECF9BDDE37487543FE190E912846BB736CC1FC3615E2A6BA5549BF390C7A0F900D1B73D03E74EBE59ABA52733A1CF854E3DA386895654C60B18DF71D1AD315C221374F93E9104AC86AC288CEAE4778C91D245C3B9C1E39408A3F61D6ED162750B8BC3BDC62E93D79A94F26491FFED510EE0495B341FF76BE3F564B52A70F550E9DF60FA618AE539E4CF7D4F789F91D8D8F98F9480BEB7C96C43E15819D952DBC179983447898DE6FFBF4ACA956D15A93D785F43C593C266BDDE2DF07E56D6741916AB5BF31223723D169FBD607A5C3EADA3B7A8A6B3D1027DAC7F507CC3C1EC628E97D0232CCFF4845DDA9BAABF4A7270A1C9D594871C8CECE96BD610EF65760F1A3B24FC7F2A8352EABE4377AE71A80F0CE64CE79D29A9BFAD5967D7576020F71E91529B15BB1C0CC447271B049D78D00EFE24561D4A1CB59A4A9EC155B1B8C592A16EE205E667E085E65A1493B4737177624435C3A705FF7C7839793B5DC351BA764E8863C75C11D454CF8C8595F96E66E1665494328835036CAE16F6B8CB741189A014680A978F28EA023F52A229F1370ED30E459E5AE95911A90A50E8A48A4CB2E186DAF5110D38BED0657F33934F902BF106A1F6BB3DDF5009698097561CFDE2ECEBDC0630FF6CE488DA55775B5EC2C66E90F7757C09C1317CE9A7DCCCC704550CA56FAFB319107FE1975329D63CA00BEA15B35760B6EB9EE09DBEC5E3679BC45B8F2B8976E82FD517AACDF85FE70C5E5783D619AB70BA08FDA28538E32E3FB051CE406C8DEF7F12C6A2DCA601D237D54E1A5B0A794C9F7EE3A81C9F84C9D93A57336F99A7172375E76A774787B31AB51E7ABBB93843E8CCAEDD75634594A8B89187B243E5C884146120A0E69EABF075D4EDD11A1C04E3EBEDDC5CCA1759AE7ABA488E8438716AF94E8F52DBDA1F055B81332206E61DF53663DED16C4EAEF2B17A5F61AE0D0ADC2FAB55693C9C837C7F69D83BE1FF72BFAA986E9F8B961934CECB704C83B30193B7255D53D7BD9A5EDC31013C687E57DC93807CCDCFC4049883C0DAB1E8780C9E80A5A95305E4A6A5B0A68E060CEB978E2BF17086A2E79A48840721C9B3A9507D2AEA55BB6E2A796F2BD3E8EC82F175C6975AA4DA71D5DB0130B8A453CA1065AFBD0A5FC7D254862A0C3AB33CF17754FA63B05B3471E2584730683DBD23B48EEE6A2DBE3F1E1A587BF8DF76D77922A11DDD6AFF3FD02A62E288FE942037F04E14F9C1650132459B9F89FAC995A71BE741659A02DCAFEDAE3468383FE449543357EE843FE9E163981C34B78744D72DED7194FF67043A3B26759DCA684827E26379F141E0C4D8803B8E7A1E81B848B6CF706F0C4C8FA5FEAC9E7F56567615FF3AEF96A1B640D05E064668B8821295EC285B7A40F8CF26875AB116C397B578A971CD346CD81298D7A51B6D9A2C07D84A5A08F4F4254B9945CAE082C29412DD0DC4FA22E44B27DCEA83CF407FE5CAFD9F336A0F1668C556405976E8ACA2FEEBA610F95243A4ACBFCB1935E06D1294F73F4AD75542A68E909EDF896911C920FAD7D4F64315D5A53CE14E71E6D7ABE804A5236C902B81D01D60CFAC6BD6FB8B66C9672610DDC255C332FD37073B1368EA8CE998528E0B058FCAEBB9EA3BFD5CEB3E16027911517AC9DE8DF64E6A2EA4621CF41EA7FB4EFB906B14CBF03C9FD9C52E7EE49204FD853B7CA707AED97751CB3CF072C3611F4E2203A37B2B3F2579D7AE81C37C9F105B1181723C54BAF38C99FFB16F6D0F8366C6C2FC8B19CD13431A7376E355A46D22CD23F9FF3FF6C447D696B680F610CFF314384F4AF901C00DFDD3D6F5C6F8E9EAEEC710C96FB64C4D22FE8F7188A89C6BDFF561999B39FD87432F71C9C990A9360998326A30D6F483BDB44ABE990D88D1019AA4B2EA6C9902BB4418AD9026CD5332C534491CB814166E426EB8B260892BA96DBD4D061545AB720C8AD3394C1969A2FBBC68C22F2C28BF1951FCC647A45763CA912131F4BDB33E25DAA647814D6681815C69AFEC67D667F0585745F960DD7A785EC1901D1BF3741AE4064FED7A794EB0EE51069C706178AB025EA88E9DF310AB8F16DB140CD73C359FC480E1FB1A54CCC3AF99ECFEB0F0D34BD883BCFBDF874608594B670300464DF32046256C09B8D79F64A6C6AE0D9970EE1C9E2FD41500F2C65D704F68D55A7292514AFF174A605ACDB7A760B3541DA4EB048E70FA2F464BA45D91C9925839136D238E8F041013EFE1FD0AF161BF89CD4C0867E22BBB7F0FA4247C3BD1AAE7A0681A28AA4D6EB57280F2B2D9DAD4DBF39FCF0765C69AD8342CE8F1136A39170B42A0B982BA31630876DE56532C1FCA04378005C27FCE911ED3A9EF4DECF11347F729F171CE7AC33BDCC5519987B30E5CFFAAAAD20CE68034B884ACCE21BF4ECECD88888C7AC3FCFE65C4DF67A96DF296D71EBDA66B0A71624D5DC734AE3AC5EEE66DD264F6C9F7B6578F51BDE08FCB5D14B4D9C6015C1EBA94C7C573F0711EF0789D80A25A4306EB72BB080926C1C73FD44C20F4FEF9B7C86E33ED915022BEBE2DA8177D46819992137F65D5C1A0AE5704C6240F542DF0F81E35975FF8F0A8B4645AC9663ECED4086A4A87C3EAED375A23C5FB00D23A259C67FBFA976D0603C06AE48FB017EA63243AA6D91049A874D9523CE60CDB040DE6F35D1C076197DD36F282266BB6E39EB7928E4FEB7C23DA86BE2BF2DCF6B9FAAD6280BEE0B3844B8A87C0939B7F2ED90C46815804056308A160253FCCC2A5FDBD21277627CDE7460D924F39E1DD79627CA474490C962AD31814318CCC5B3374253392093931CC63585734D0DE4A0EDAC48F0112B371B7D33A138FA6FE7411ED5E6174797BF7F218459A5AB0E8F685DD57E312DBE101B486DD5EFA7F184DD40645AFF811234EBA645D6DF35258362335384B254F7978C76EA114027B465312680187C7A2B1F359F525F269847C643E2227961D51BF3784B704A15C75F8C3C0293FC6566370D0A67FDD3D3B3D9BBC55522F7B48CCC0E8992B832C4A402D123188070C880A3515F6E7ED655D7119650CD6DE913053B7AE77C32F025E59024ACDD9069774B090545B862E25A722B5461EB533F31A2C87B4FB88A83A23DB22EF7408933501D2592A7F3011D6A465DD79D3E70720DDB6E1F03EDFB6D9D7E8A836B9FC306E8297CE4FF9875447062B4AAD1591A639C39D0A269CEA37432D86870D9D25A634F39163847E3B75562120598483DFDE7B8D88CD13EDE5736A7859835CE17B5B8F0B3065BE09E29B87D2A29E6BE9ADB5E408D823976EDFA5D92499E6174A30EAC5932667C758ED05FCC27C6EE694625B6019F33BEAAA6D87458CCF2DFA6C8C38422BBBDE05C75E37E9C5EEB7DFC2DB042FD0BC3611F6FCBC9FF4EDF3452E3EDA3988B8D18C4EA24E5A8E8BC05ACD127723B125EA81DF7181BB021C846D845105AE1B0CF225F23C021DA2AC8167EB77EF9B952DC9FAD43E1D7BE7A1311BA3AD0BBA8878958FD8E929F9715FBB9751AEFEE6A219ED66B5780B4F7DCC2B5EF49FE425B4694EC57371545553F5DEC15922F06311F6CEAD3B9310B9F706A06E3459354A0CF8CAE6B8A2A6F55729C8DED0DD3C3A273B35C60C55210A76E152008317C3124E47B34A8126F41F7BD73AA9007D8ADC7C1286F9FC2D141DB39239882B7A67C4AFAC2EC47C14EB35F595DAAE47DA46A5F774467D5B82BD7D22A5E568684718AE2CA7FAF1ADE7CB97A6FC82E75300528592CDA1D9C9AE2269FDD05DC84D8C2560D872ECD3FFC7C868E1AEAE4E5812CB16AB9F513FC3BAEFB78717E57B36BB908E7E005A35D0862B0696FFA8B429053227D9D94FBA3C721CB1DFCFF0F44FCABE416510FD5F4B59436826B40C38D4ADD9926AA06DB2A61F46E183B59062CF936444D88262C364A17987DE70E48F2059DAD007803EB1C97176BD4FB22C512F9EF79625668B782E0A2B32EA57C5A4363C6DC13B20BBADCB75A75A183D9B417D97A89B1AF715A9418F61DF1875884A1286D08F5178EC2ED9051B641222AC86D3170E65CFCBBE10CA63833AB245AF5D9D78EEE8B62868AE0210DC7D92ACEA10A8C7D9715296A06C450D192A55F168840F00B72A4F2AE1D5AF96DDCACF86202D653661042D6A80E05CCC821FBBB37161F97ED11D4BBCF72222056EDE333F56CEFA29A3C686C79978B1334E6010F7DFA5F6FD953873BB03E9A3D22728F065B446A5814C54BC153A879CA50755BF109F91537423AB57751AB5F9D5F7E68DC53714CE69D609F4D5F45FE7F70BA4595336A233559481A052100CB84B0DEA76BA1AD8320D619CEA30640482B1B3CC2F7920CC6A46FD66F7327946FA6728AD53966B949886CD76ADBEEC2F0624220B8B0EE2C525D2F87B8FCBD21F3EBE3B0A1D4659B7DACE09DF81D95D15F3A0894A63EC6E88E18C06738063D6478CC5E7EB7C1C9D306690D594D691101080F9AA4F32C5D52B15F96213A404F4C043C52B4469C78570C07EEB35BF1E10A7039BC1C9EA7D8C1318A84934959EEF925B063EFDD5F876CBD16B718ABA3216DFECA86666D11146A71C7EFE01BEA30CA4B8E323B16A5D1C454453A1B3FC380EE6E97FAB9E7FE838C1EEAF6E81233EC1302F59FE412B78CA49497BD28FD5685C94F465D0FF2640617C7C64F078EE6C87A194DF74DAA6127ED512DBB0C3892F3FF9C177EDEAE29016D7AAD22247EA4D83E1E468E86604868113F1AEA09DAB9F54EB5EA7E23906C1342868EEE76AF11B024F9D60453CDA59E14E9ED0E4AB30E5F259C710940B76159FA8C395717A1748CB2F3940866A209DC3F3E1B7980EB2195BE0CEF8352B843AED6A5419A36CDE3EEEFEFCF08384E0F83A01A420126F709A948250D0A3593A779C9B9466F1EFB71079C21F68AFD4957482814B1A56C76C13A97C19A77262D8C4593477BA8A54445F7A950ABD486397E1B9D350FDE2C257DBA9C0F614C92587F7FE27D3D795461D8B24E2EC871793CB0BCEED47A4254C157C2B948334C42A258BD67374F8D8DBA389FBC73AFD09F7D3AF37620F5AE0CD70A6E8B751AA6B9A5595FE69382A4011EC0CDB242ABD23E07ECC0A2BCECBA3639E15DECF1A02C7219442C58230CD378C0AEF3200A401BA1F63DD3FDB416423EFC587ACFC3009B39005F644D75B2E77D639511D01691A884A9ABCCB322D10A44CEE910370000B1AAFEFA30D2CA0866F96E27AE168F2BE355310FDFE567451D549CFDAECF491659D1AC007BE86B04A756D8D04279F173589F19F017B048B1FD30E88578CC1DD46D6592BAF0CB87CE77934D7190D9B6ED95981D47BBB35BD1E53E5C4463F77CA0E9DBF774BE80E6A7AF918CE201820C1791A2315EA8C071AB639CEBD47B9207091DCB89E62ACE032AA20EB95CF0C2D3EE33D2D65B0CC39AEE679CD5E806F88A1264C90F2449C881C8F1529E824FD8DD1BF2E92C16F09DC32747822BB83EC120792BD1073CF68BF1C1C43B08EA465DF63D569BB78545059C8DF7F5E76CF00377562C9BE1E688589CDF8007CF04806207D71925375DAA430B267447E227DCA03513ECD61D442A7D4639BA52133306E6D73D3AD9A9599AD20AECEC2D21F7308AFEA02343CC670403CDB676B238CF66D73B5F1C8A00E4C68ECB70ECB75F28070727970A9640EBF15B6DF54DAF1AF3284E669E04C2F40ADD5787353E6540FBE09C34C131375E0B9E13B07B4DB81D4A0D6951C67408FB5552F09668900CD4C7B046A4E82DE7B434C3562182E4ACB26A69ADA25FBC38275279B5E5F3CA93D93FC04AA56865B8F90C692837CEBB74CEAEEA29065A1825AF6B00284AE86A2C4FADE1BBF4EDFAC662E9131993162AEE348454ED5C11D140B2BD0FF1CE8B3EEB1849CF02C6D685C874F6246923CA081858EED5C4F175D21A084EABD743A3E3771842FA8D5F9EC0E8BE422C5D3D47FB72ABDDC263DDF0799EB8C59A7C2F9557656BC251FEFE089723D204E3C3BA499DDD20B0295B3E869CC227F3AED21CC37374917BCBD669ABF8DA7E6AAA91D384287A171E08E524F5A0F8CD95F18D45B047DF5A84D0DD02905F17024DF5AD25D22D61F56641F2DE52712636BC37FBAE7089A148A8FA347E903CED0CE3CFE939901F5CC7137C815C94FB20DBECADE281CF1091C5FF84CEF6649472399185597074265731B7CA501ED0C46825A2CDB007E100E7F05E89E8F12C91CAA23C21CFCFB22C9ECEF469E030F44776872BC23B31B8AE2FF203E8906E69D90137F403DA9188D1E206618455B1143AFF8BC354A07A26E2D9555A56CDAE543CA815D9D625BFF6C82A4ED34070DE330EF27EF8250E6F0C80F6A5541976089A84DB2772FDE801892BFBE8D056FF8F10086FDB0EA699FEB203CDD9D98A181C0C4A7A0A1C6ACAC2764CC2E071A1CD954327B0DB3A597B1E825D845D98A000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%!FontType3-1.0: PingFangSC-Regular19 dict dup begin/FontType 3 def/FontMatrix matrix def/FontBBox {0 0 0 0} readonly def/PaintType 0 def/StrokeWidth 0 def/BuildGlyph{save 3 1 roll1 index dupbegin/ShowProc get 3 1 roll1 index /CharProcs get exch get exec7 -1 roll execendrestore} bind def/BuildChar{1 index /Encoding get exch get1 index /BuildGlyph get exec} bind def/$SP{3 -1 roll dup /SetupSubFont get execdup setfontexch 0 0 2 index stringwidth} bind def/$SPW{4 -1 roll dup /SetupSubFont get execdup setfont3 1 roll 0 0 0 4 2 roll} bind def/$SPTW{5 -1 roll dup /SetupSubFont get execdup setfont4 1 roll neg  0 3 -1 roll 0} bind def/$RP{6 -1 roll dup /SetupSubFont get execdup setfont 5 1 rolltranslate -90 rotate 0 0 0 4 2 roll} bind def/SetupSubFont{dup /PaintType get 1 index /StrokeWidth get3 -1 roll /$SubFontArray get 4 1 roll3 index 3 index getdup /PaintType known{dup /PaintType get}{0}ifelse1 index /StrokeWidth known{1 index /StrokeWidth get}{0}ifelse3 index ne exch 4 index ne or{dup length 2 add dict begin{1 index /FID eq {pop pop}{def}ifelse}forall/StrokeWidth exch def/PaintType exch defcurrentdict enddup /CIDFontName known{/Anonymous exch /CIDFont defineresource}{/Anonymous exch definefont}ifelsedup 4 1 roll put}{ pop pop pop get}ifelse} bind def/ShowProc{systemdict /rectfill known{0 setcachelimit}if6 -1 roll dup /FontMatrix get exch /FontBBox get aload pop4 index transform 4 2 roll5 -1 roll transform 4 2 rollsetcachedevicemoveto dup type /stringtype eq {show}{glyphshow} ifelse} bind def/FontInfo 4 dict dup begin/Registry (Adobe/) def/Ordering (Identity/) def/Supplement 0 defend readonly def/FontName /PingFangSC-Regular def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /cid57 putdup 34 /cid72 putdup 35 /cid75 putdup 36 /cid76 putdup 37 /cid70 putdup 38 /cid79 putdup 39 /cid3 putdup 40 /cid51 putdup 41 /cid82 putdup 42 /cid86 putdup 43 /cid87 putdup 44 /cid81 putdup 45 /cid50 putdup 46 /cid69 putdup 47 /cid85 putdup 48 /cid89 putdup 49 /cid68 putdup 50 /cid11 putdup 51 /cid80 putdup 52 /cid12 putdup 53 /cid47 putdup 54 /cid71 putdup 55 /cid78 putreadonly def/$SubFontArray [/AAAAAC+PingFangHK-Regular findfont ] def/CharProcs 25 dictdup /cid0 {(\000) 0 $SP} 2 index /.notdef 2 index put putdup /cid3 {(\001) 0 $SP} putdup /cid11 {(\002) 0 $SP} putdup /cid12 {(\003) 0 $SP} putdup /cid47 {(\004) 0 $SP} putdup /cid50 {(\005) 0 $SP} putdup /cid51 {(\006) 0 $SP} putdup /cid57 {(\007) 0 $SP} putdup /cid68 {(\010) 0 $SP} putdup /cid69 {(\011) 0 $SP} putdup /cid70 {(\012) 0 $SP} putdup /cid71 {(\013) 0 $SP} putdup /cid72 {(\014) 0 $SP} putdup /cid75 {(\015) 0 $SP} putdup /cid76 {(\016) 0 $SP} putdup /cid78 {(\017) 0 $SP} putdup /cid79 {(\020) 0 $SP} putdup /cid80 {(\021) 0 $SP} putdup /cid81 {(\022) 0 $SP} putdup /cid82 {(\023) 0 $SP} putdup /cid85 {(\024) 0 $SP} putdup /cid86 {(\025) 0 $SP} putdup /cid87 {(\026) 0 $SP} putdup /cid89 {(\027) 0 $SP} put def end dup /FontName get exch definefont pop%RBIEndFontSubset
/PingFangSC-Regular cguidfix
/F1.1/PingFangSC-Regular renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 590 457 rc
-62 669 m
1093 669 l
1093 -114 l
-62 -114 l
h
-62 669 m
f
11.700787 172.93701 m
45.716534 155.92914 l
11.700787 138.92126 l
h
11.700787 172.93701 m
f
2 w
1 J
1 j
0.60000002 i
0.69411767 0 0.10980392 sc
1 0 0 -1 -62 669 cm
73.70079 496.06299 m
107.71654 513.07086 l
73.70079 530.07874 l
h
73.70079 496.06299 m
S
0 i
1 1 1 sc
CM
137.91721 256.48438 m
171.93295 239.4765 l
137.91721 222.46863 l
h
137.91721 256.48438 m
f
0.60000002 i
0.69411767 0 0.10980392 sc
1 0 0 -1 -62 669 cm
199.91721 412.51562 m
233.93295 429.5235 l
199.91721 446.53137 l
h
199.91721 412.51562 m
S
0 i
1 1 1 sc
CM
561.62207 340.18109 m
565.44055 328.42896 l
577.79749 328.42896 l
567.80054 321.16571 l
571.61902 309.41357 l
561.62207 316.67679 l
551.62506 309.41357 l
555.44354 321.16571 l
545.44659 328.42896 l
557.80353 328.42896 l
h
561.62207 340.18109 m
f
0.60000002 i
0.13725491 0.36862746 0 sc
1 0 0 -1 -62 669 cm
623.62207 328.81891 m
627.44055 340.57104 l
639.79749 340.57104 l
629.80054 347.83429 l
633.61902 359.58643 l
623.62207 352.32321 l
613.62506 359.58643 l
617.44354 347.83429 l
607.44659 340.57104 l
619.80353 340.57104 l
h
623.62207 328.81891 m
S
0 i
1 1 1 sc
CM
195.95276 192.77953 m
199.77126 181.02737 l
212.1282 181.02737 l
202.13123 173.76414 l
205.94974 162.01199 l
195.95276 169.27522 l
185.95578 162.01199 l
189.77428 173.76414 l
179.7773 181.02737 l
192.13425 181.02737 l
h
195.95276 192.77953 m
f
0.60000002 i
0.13725491 0.36862746 0 sc
1 0 0 -1 -62 669 cm
257.95276 476.22046 m
261.77127 487.97263 l
274.1282 487.97263 l
264.13123 495.23584 l
267.94974 506.98801 l
257.95276 499.72476 l
247.95578 506.98801 l
251.77428 495.23584 l
241.7773 487.97263 l
254.13425 487.97263 l
h
257.95276 476.22046 m
S
0 i
1 1 1 sc
CM
246.97638 445.06299 m
250.79488 433.31085 l
263.15182 433.31085 l
253.15485 426.04761 l
256.97336 414.29547 l
246.97638 421.55869 l
236.9794 414.29547 l
240.7979 426.04761 l
230.80093 433.31085 l
243.15787 433.31085 l
h
246.97638 445.06299 m
f
0.60000002 i
0.13725491 0.36862746 0 sc
1 0 0 -1 -62 669 cm
308.97638 223.93701 m
312.79489 235.68916 l
325.15182 235.68916 l
315.15485 242.95239 l
318.97336 254.70454 l
308.97638 247.44131 l
298.9794 254.70454 l
302.79791 242.95239 l
292.80093 235.68916 l
305.15787 235.68916 l
h
308.97638 223.93701 m
S
0 i
1 1 1 sc
CM
317.84253 289.15747 m
351.85828 272.1496 l
317.84253 255.14174 l
h
317.84253 289.15747 m
f
0.60000002 i
0.69411802 0 0.109804 sc
1 0 0 -1 -62 669 cm
379.84253 379.84253 m
413.85828 396.8504 l
379.84253 413.85828 l
h
379.84253 379.84253 m
S
0 i
1 1 1 sc
CM
490.75589 218.29134 m
524.77167 201.28346 l
490.75589 184.27559 l
h
490.75589 218.29134 m
f
0.60000002 i
0.69411802 0 0.109804 sc
1 0 0 -1 -62 669 cm
552.75592 450.70865 m
586.77167 467.71652 l
552.75592 484.7244 l
h
552.75592 450.70865 m
S
0 0.21568628 0.4627451 sc
98.989632 507.58939 m
198.91721 441.44357 l
S
231.04198 426.95999 m
378.84253 400.12048 l
S
407.4259 401.1846 m
551.75592 460.33624 l
S
0 i
1 1 1 sc
CM
417.05511 192.77953 m
420.87363 181.02737 l
433.23056 181.02737 l
423.23358 173.76414 l
427.05209 162.01199 l
417.05511 169.27522 l
407.05814 162.01199 l
410.87665 173.76414 l
400.87967 181.02737 l
413.2366 181.02737 l
h
417.05511 192.77953 m
f
0.60000002 i
0.137255 0.36862701 0 sc
1 0 0 -1 -62 669 cm
479.05511 476.22046 m
482.87363 487.97263 l
495.23056 487.97263 l
485.23358 495.23584 l
489.05209 506.98801 l
479.05511 499.72476 l
469.05814 506.98801 l
472.87665 495.23584 l
462.87967 487.97263 l
475.2366 487.97263 l
h
479.05511 476.22046 m
S
0 i
1 1 1 sc
CM
62.724407 121.91339 m
507.76376 121.91339 l
507.76376 11.362208 l
62.724407 11.362208 l
h
62.724407 121.91339 m
f
1 w
0.60000002 i
0 0 0 sc
1 0 0 -1 -62 669 cm
124.72441 547.08661 m
569.76379 547.08661 l
569.76379 657.63782 l
124.72441 657.63782 l
h
124.72441 547.08661 m
S
0 i
1 1 1 sc
CM
96.740158 57.716537 m
100.55866 45.964386 l
112.9156 45.964386 l
102.91862 38.701157 l
106.73714 26.949005 l
96.740158 34.212234 l
86.743179 26.949005 l
90.561684 38.701157 l
80.564705 45.964386 l
92.921654 45.964386 l
h
96.740158 57.716537 m
f
2 w
0.60000002 i
0.137255 0.36862701 0 sc
1 0 0 -1 -62 669 cm
158.74016 611.28345 m
162.55865 623.03558 l
174.9156 623.03558 l
164.91862 630.29883 l
168.73714 642.05096 l
158.74016 634.78778 l
148.74318 642.05096 l
152.56169 630.29883 l
142.56471 623.03558 l
154.92165 623.03558 l
h
158.74016 611.28345 m
S
0 i
1 1 1 sc
CM
82.566925 108.74016 m
111.91338 94.066933 l
82.566925 79.393707 l
h
82.566925 108.74016 m
f
0.60000002 i
0.69411802 0 0.109804 sc
1 0 0 -1 -62 669 cm
144.56693 560.25983 m
173.91339 574.93304 l
144.56693 589.60632 l
h
144.56693 560.25983 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 188.86613 91.909454 cm
/F1.1[ 16 0 0 -16 0 0]sf
-70.118111 6 m
(!"#$%&"'\(\)*$+$\),)[ 10.224000 8.880000 8.896000 4.096000 8.752000 3.760000 8.880000 5.328000 10.272000 9.376000 8.080000 4.096000 5.680000 4.096000 9.376000 0.000000 ] xS
[
8
8
] 0 d
0.60000002 i
/Cs1 SC
0.19215687 0 0.40392157 sc
1 0 0 -1 -62 669 cm
334.48819 577.2677 m
388.34647 577.2677 l
S
[] 0 d
0 0.21568628 0.4627451 sc
334.48819 628.29132 m
388.34647 628.29132 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 407.68109 41.055122 cm
-73.5 -5 m
(-.*"/01+$\),)[ 12.272000 9.376000 8.080000 8.880000 5.840000 7.712000 8.944000 5.680000 4.096000 9.376000 0.000000 ] xS
-73.5 17 m
(2!"#$%&"'3\)0"3",+4)[ 5.328000 10.224000 8.880000 8.896000 4.096000 8.752000 3.760000 8.880000 5.328000 13.680000 9.376000 7.712000 8.880000 13.680000 8.880000 8.944000 5.680000 0.000000 ] xS
[
8
8
] 0 d
0.60000002 i
/Cs1 SC
0.192157 0 0.40392199 sc
1 0 0 -1 -62 669 cm
253.99095 487.07672 m
221.61249 436.80176 l
S
474.29987 487.6532 m
402.60373 403.5957 l
S
248.80389 494.31381 m
106.26199 511.22556 l
S
316.35718 254.03984 m
389.29898 383.4527 l
S
220.70044 421.78922 m
303.12766 252.92673 l
S
0 i
1 1 1 sc
CM
65.559052 337.34647 m
69.377563 325.5943 l
81.734505 325.5943 l
71.737526 318.33109 l
75.55603 306.57892 l
65.559052 313.84216 l
55.562077 306.57892 l
59.380581 318.33109 l
49.383606 325.5943 l
61.740547 325.5943 l
h
65.559052 337.34647 m
f
[] 0 d
0.60000002 i
0.137255 0.36862701 0 sc
1 0 0 -1 -62 669 cm
127.55905 331.65353 m
131.37756 343.4057 l
143.7345 343.4057 l
133.73753 350.66891 l
137.55603 362.42108 l
127.55905 355.15784 l
117.56208 362.42108 l
121.38058 350.66891 l
111.38361 343.4057 l
123.74055 343.4057 l
h
127.55905 331.65353 m
S
[
8
8
] 0 d
0.192157 0 0.40392199 sc
125.48877 357.89807 m
92.647972 504.41855 l
S
0 i
1 1 1 sc
CM
417.05511 351.51968 m
420.87363 339.76755 l
433.23056 339.76755 l
423.23358 332.5043 l
427.05209 320.75217 l
417.05511 328.01538 l
407.05814 320.75217 l
410.87665 332.5043 l
400.87967 339.76755 l
413.2366 339.76755 l
h
417.05511 351.51968 m
f
[] 0 d
0.60000002 i
0.137255 0.36862701 0 sc
1 0 0 -1 -62 669 cm
479.05511 317.48032 m
482.87363 329.23245 l
495.23056 329.23245 l
485.23358 336.4957 l
489.05209 348.24783 l
479.05511 340.98462 l
469.05814 348.24783 l
472.87665 336.4957 l
462.87967 329.23245 l
475.2366 329.23245 l
h
479.05511 317.48032 m
S
[
8
8
] 0 d
0.192157 0 0.40392199 sc
470.32574 341.11047 m
404.49524 391.05084 l
S
229.87476 432.67062 m
463.06287 489.3418 l
S
573.24603 459.83569 m
618.5899 357.21533 l
S
0.19215687 0 0.40392157 sc
489.10617 349.25064 m
559.83142 453.12839 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 415.09448 92.078743 cm
-82 -5 m
(-.*"/01+$\),)[ 12.272000 9.376000 8.080000 8.880000 5.840000 7.712000 8.944000 5.680000 4.096000 9.376000 0.000000 ] xS
-82 17 m
(2!"#$%&"'+\)'51,631/74)[ 5.328000 10.224000 8.880000 8.896000 4.096000 8.752000 3.760000 8.880000 5.328000 5.680000 9.376000 5.328000 9.408000 8.944000 8.944000 9.376000 13.680000 8.944000 5.840000 8.464000 0.000000 ] xS
1 0 0 -1 189.48425 40.216537 cm
-69.5 6 m
(51,631/7'\(\)*$+$\),)[ 9.408000 8.944000 8.944000 9.376000 13.680000 8.944000 5.840000 8.464000 5.328000 10.272000 9.376000 8.080000 4.096000 5.680000 4.096000 9.376000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
